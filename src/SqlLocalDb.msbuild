<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(SolutionDir)AssemblyVersion.targets" />
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <PlatformToolset>v120</PlatformToolset>
    <SqlLocalDbRoot>$(MSBuildProjectDirectory)\</SqlLocalDbRoot>
    <OutDir>$(SqlLocalDbRoot)BuildOutput\</OutDir>
    <SolutionFile>$(SqlLocalDbRoot)SqlLocalDb.sln</SolutionFile>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>
    <RunTests Condition="'$(RunTests)' == ''">true</RunTests>
    <CodeAnalysisTreatWarningsAsErrors Condition="'$(CodeAnalysisTreatWarningsAsErrors)' == ''">true</CodeAnalysisTreatWarningsAsErrors>
    <SourceAnalysisTreatErrorsAsWarnings Condition="'$(SourceAnalysisTreatErrorsAsWarnings)' == ''">false</SourceAnalysisTreatErrorsAsWarnings>
    <TreatWarningsAsErrors Condition="'$(TreatWarningsAsErrors)' == ''">true</TreatWarningsAsErrors>
    <SignOff Condition="'$(SignOff)' == ''">false</SignOff>
    <CreatePackage Condition="'$(SignOff)' == 'true' or '$(CI)' != ''">true</CreatePackage>
    <CreatePackage Condition="'$(CreatePackage)' == ''">false</CreatePackage>
    <CreateZip Condition="'$(SignOff)' == 'true' or '$(CI)' != ''">true</CreateZip>
    <CreateZip Condition="'$(CreateZip)' == ''">false</CreateZip>
    <NuGetPrerelease Condition="'$(NuGetPrerelease)' == '' and '$(CI)' != '' and '$(APPVEYOR_REPO_TAG)' == 'false'">beta$(APPVEYOR_BUILD_NUMBER)</NuGetPrerelease>
    <NuGetPrerelease Condition="'$(NuGetPrerelease)' == ''"></NuGetPrerelease>
    <NuGetVersion Condition="'$(NuGetVersion)' == ''">$(AssemblyVersion.Substring(0, $(AssemblyVersion.LastIndexOf(`.`))))</NuGetVersion>
    <NuGetVersion Condition="'$(NuGetPrerelease)' != ''">$(NuGetVersion)-$(NuGetPrerelease)</NuGetVersion>
    <CoverityOutputDir Condition="'$(CoverityOutputDir)' == ''">$(OutDir)cov-int</CoverityOutputDir>
    <CoverityZipFile Condition="'$(CoverityZipFile)' == ''">$(OutDir)SqlLocalDb_$(AssemblyVersion).Coverity.zip</CoverityZipFile>
    <ChangelogPath>$(SolutionDir)\..\changelog.md</ChangelogPath>
    <CodeTaskFactoryAssembly Condition="'$(MSBuildToolsVersion)' != '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssembly>
    <CodeTaskFactoryAssembly Condition="'$(MSBuildToolsVersion)' == '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <BuildProperties>Configuration=$(Configuration);CodeAnalysisTreatWarningsAsErrors=$(CodeAnalysisTreatWarningsAsErrors);SourceAnalysisTreatErrorsAsWarnings=$(SourceAnalysisTreatErrorsAsWarnings);TreatWarningsAsErrors=$(TreatWarningsAsErrors)</BuildProperties>
  </PropertyGroup>
  <ItemGroup>
    <PlatformsToBuild Include="Any CPU" />
  </ItemGroup>
  <Target Name="Clean">
    <MSBuild Projects="$(SolutionFile)" Targets="Clean" Properties="$(BuildProperties);Platform=%(PlatformsToBuild.Identity);OutDir=$(OutDir)"/>
  </Target>
  <Target Name="Build" DependsOnTargets="RestorePackages">
    <MSBuild Projects="$(SolutionFile)" Targets="Build" Properties="$(BuildProperties);Platform=%(PlatformsToBuild.Identity);OutDir=$(OutDir)"/>
  </Target>
  <Target Name="Rebuild" DependsOnTargets="RestorePackages">
    <MSBuild Projects="$(SolutionFile)" Targets="Rebuild" Properties="$(BuildProperties);Platform=%(PlatformsToBuild.Identity);OutDir=$(OutDir)"/>
  </Target>
  <Target Name="BeforeBuild" BeforeTargets="Build;Rebuild">
    <CallTarget Targets="UpdateAssemblyConfiguration" Condition="'$(APPVEYOR_REPO_COMMIT)' != ''" />
    <CallTarget Targets="SetGitHubReleaseDescription" Condition="'$(APPVEYOR)' != ''" />
  </Target>
  <Target Name="AfterBuild" AfterTargets="Build;Rebuild">
    <CallTarget Targets="Test" Condition="'$(RunTests)' == 'true'" />
    <CallTarget Targets="CreateZipFiles" Condition="'$(CreateZip)' == 'true'" />
    <CallTarget Targets="CreateNuGetPackage" Condition="'$(CreatePackage)' == 'true'" />
  </Target>
  <Target Name="Test">
    <IsCurrentUserAdmin>
      <Output PropertyName="_IsCurrentUserAdmin" TaskParameter="IsAdmin" />
    </IsCurrentUserAdmin>
    <PropertyGroup>
      <VSPath Condition="'$(MSBuildToolsVersion)' != '14.0'">$(VS120COMNTOOLS)</VSPath>
      <VSPath Condition="'$(MSBuildToolsVersion)' == '14.0'">$(VS140COMNTOOLS)</VSPath>
      <TestToolDir Condition="'$(APPVEYOR)' == ''">$(VSPath)..\IDE\CommonExtensions\Microsoft\TestWindow\</TestToolDir>
      <TestToolDir Condition="'$(APPVEYOR)' != ''"></TestToolDir>
      <TestToolName>vstest.console.exe</TestToolName>
      <TestFramework Condition="'$(TestFramework)' == ''">Framework40</TestFramework>
      <TestSettings Condition="'$(TestSettings)' == ''">$(SolutionDir)SqlLocalDb.runsettings</TestSettings>
      <TestOptions Condition="!$(_IsCurrentUserAdmin)">$(TestOptions) /TestCaseFilter:TestCategory!="Requires Administrative Permissions"</TestOptions>
      <TestOptions Condition="'$(APPVEYOR)' != ''">$(TestOptions) /logger:Appveyor</TestOptions>
    </PropertyGroup>
    <ItemGroup>
      <TestContainer Include="$(OutDir)\*test*.dll" />
      <PlatformsToTest Include="x86" />
      <PlatformsToTest Include="x64" />
    </ItemGroup>
    <Exec Command="%22$(TestToolDir)$(TestToolName)%22 @(TestContainer->'%22%(fullpath)%22', ' ') %22/Settings:$(TestSettings)%22 /EnableCodeCoverage /InIsolation %22/Platform:%(PlatformsToTest.Identity)%22 %22/Framework:$(TestFramework)%22 $(TestOptions)" WorkingDirectory="$(OutDir)" />
  </Target>
  <UsingTask TaskName="IsCurrentUserAdmin"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <IsAdmin ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Security.Principal"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        using (WindowsIdentity identity = WindowsIdentity.GetCurrent())
        {
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            IsAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="MSBuild.ExtensionPack.Compression.Zip" AssemblyFile="$(SolutionDir)Tools\MSBuildExtensionPack\MSBuild.ExtensionPack.dll" />
  <Target Name="CreateZipFiles">
    <ItemGroup>
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.dll" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.xml" />
      <FilesToZip Include="$(OutDir)\en-GB\System.Data.SqlLocalDb.resources.dll" />
    </ItemGroup>
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressFiles="@(FilesToZip)" RemoveRoot="$(OutDir)" ZipFileName="$(OutDir)SqlLocalDb_$(AssemblyVersion).zip" />
    <ItemGroup>
      <FilesToZip Include="$(OutDir)\log4net.dll" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.pdb" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.TestApp.exe" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.TestApp.exe.config" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.TestApp.pdb" />
    </ItemGroup>
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressFiles="@(FilesToZip)" RemoveRoot="$(OutDir)" ZipFileName="$(OutDir)SqlLocalDb_$(AssemblyVersion).TestApp.zip" />
  </Target>
  <Target Name="CreateNuGetPackage">
    <RemoveDir Directories="$(OutDir)\src" />
    <ItemGroup>
      <SourceFiles Include="$(SolutionDir)\*.cs;$(SolutionDir)\**\SqlLocalDb\**\*.cs" Exclude="$(SolutionDir)\**\obj\**\*.cs" />
    </ItemGroup>
    <PropertyGroup>
      <NuGetTool>$(SolutionDir)\Tools\NuGet\NuGet.exe</NuGetTool>
      <NuSpecFile>$(OutDir)SqlLocalDb.nuspec</NuSpecFile>
    </PropertyGroup>
    <Copy SourceFiles="@(SourceFiles)" DestinationFolder="$(OutDir)\src\%(RecursiveDir)" />
    <Exec Command="$(NuGetTool) pack %22$(NuSpecFile)%22 -Properties AssemblyVersion=$(NuGetVersion) -OutputDirectory $(OutDir) -Symbols" StandardOutputImportance="high" />
  </Target>
  <Target Name="CleanArchiveFiles" AfterTargets="Clean">
    <CreateItem Include="$(OutDir)\*.nupkg">
      <Output TaskParameter="Include" ItemName="ArchiveWrites" />
    </CreateItem>
    <CreateItem Include="$(OutDir)\*.zip">
      <Output TaskParameter="Include" ItemName="ArchiveWrites" />
    </CreateItem>
    <Delete Files="@(ArchiveWrites)" />
    <RemoveDir Directories="$(OutDir)\src" />
  </Target>
  <Target Name="UpdateAssemblyConfiguration">
    <UpdateAssemblyConfiguration AssemblyInfoPath="$(SolutionDir)CommonAssemblyInfo.cs" CommitId="$(APPVEYOR_REPO_COMMIT)" />
  </Target>
  <UsingTask
    TaskName="UpdateAssemblyConfiguration"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <AssemblyInfoPath Required="true" />
      <CommitId Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
string content = File.ReadAllText(AssemblyInfoPath);
content = content.Replace("[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyConfiguration(\"" + CommitId + "\")]");
File.WriteAllText(AssemblyInfoPath, content);
]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="BuildCoverity">
    <PropertyGroup>
      <CoverityToolDir Condition="'$(CoverityToolDir)' == ''"></CoverityToolDir>
      <CoverityTool Condition="'$(CoverityTool)' == ''">$(CoverityToolDir)\cov-build.exe</CoverityTool>
    </PropertyGroup>
    <Error Condition="!Exists('$(CoverityTool)')" Text="The Coverity Build Tool cannot be found." />
    <Exec Command="%22$(CoverityTool)%22 --dir %22$(CoverityOutputDir)%22 %22$(SqlLocalDbRoot)Build.cmd%22 /t:Rebuild /p:RunTests=false" />
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressPath="$(CoverityOutputDir)" RemoveRoot="$(OutDir)" ZipFileName="$(CoverityZipFile)" />
  </Target>
  <Target Name="CleanCoverity" AfterTargets="Clean">
    <CreateItem Include="$(CoverityZipFile)">
      <Output TaskParameter="Include" ItemName="CoverityWrites" />
    </CreateItem>
    <Delete Files="@(CoverityWrites)" />
    <RemoveDir Directories="$(CoverityOutputDir)" />
  </Target>
  <Target Name="UploadCoverity">
    <PropertyGroup>
      <CurlToolPath>$(SqlLocalDbRoot)Tools\Curl\curl.exe</CurlToolPath>
      <CoverityBuildDescription Condition="'$(CoverityBuildDescription)' == ''">$(AssemblyVersion)</CoverityBuildDescription>
      <CoverityEmail Condition="'$(CoverityEmail)' == ''"></CoverityEmail>
      <CoverityProjectName Condition="'$(CoverityProjectName)' == ''">martincostello%2Fsqllocaldb</CoverityProjectName>
      <CoverityProjectToken Condition="'$(CoverityProjectToken)' == ''"></CoverityProjectToken>
      <CoverityProjectUrl Condition="'$(CoverityProjectUrl)' == ''">https://scan.coverity.com/builds?project=martincostello%2Fsqllocaldb</CoverityProjectUrl>
      <CoverityUploadCommand>%22$(CurlToolPath)%22 --form project=$(CoverityProjectName) --form token=$(CoverityProjectToken) --form email=$(CoverityEmail) --form file=@$(CoverityZipFile) --form version="$(AssemblyVersion)" --form description="$(CoverityBuildDescription)" $(CoverityProjectUrl) --insecure</CoverityUploadCommand>
    </PropertyGroup>
    <Error Condition="'$(CoverityEmail)' == ''" Text="The CoverityEmail property is not defined." />
    <Error Condition="'$(CoverityProjectToken)' == ''" Text="The CoverityProjectToken property is not defined." />
    <Error Condition="!Exists('$(CurlToolPath)')" Text="The upload tool cannot be found." />
    <Error Condition="!Exists('$(CoverityZipFile)')" Text="The Coverity ZIP file cannot be found." />
    <Message Text="Uploading '$(CoverityZipFile)' to Coverity for static analysis..." Importance="high" />
    <Exec Command="$(CoverityUploadCommand)" StandardErrorImportance="low" StandardOutputImportance="low" />
    <Message Text="Uploaded '$(CoverityZipFile)' to Coverity for static analysis." Importance="high" />
  </Target>
  <Target Name="RestorePackages">
    <PropertyGroup>
      <NuGetToolsPath>$([System.IO.Path]::Combine($(SolutionDir), "Tools", "NuGet"))</NuGetToolsPath>
      <NuGetExePath>$(NuGetToolsPath)\nuget.exe</NuGetExePath>
      <RequireRestoreConsent>false</RequireRestoreConsent>
    </PropertyGroup>
    <Message Text="Restoring NuGet packages..." Importance="normal" />
    <Exec Command="%22$(NuGetExePath)%22 restore %22$(SolutionFile)%22" LogStandardErrorAsError="true" />
  </Target>
  <Target Name="SetGitHubReleaseDescription" Condition="Exists('$(ChangelogPath)')">
    <PropertyGroup>
      <ReleaseDescription></ReleaseDescription>
    </PropertyGroup>
    <ReadLinesFromFile File="$(ChangelogPath)">
      <Output TaskParameter="Lines" PropertyName="ReleaseDescription" />
    </ReadLinesFromFile>
    <PropertyGroup>
      <ReleaseDescription>$(ReleaseDescription.Substring($(ReleaseDescription.IndexOf(`# SqlLocalDb v$(AssemblyVersion)`))))</ReleaseDescription>
      <ReleaseDescription>$(ReleaseDescription.Replace(`;`, `\n`))</ReleaseDescription>
    </PropertyGroup>
    <Exec Command="appveyor SetVariable -Name %22GitHubReleaseDescription%22 -Value %22$(ReleaseDescription)%22" />
  </Target>
</Project>