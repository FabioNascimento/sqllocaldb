<?xml version="1.0" encoding="utf-8" ?>
<!--
  MSBuild project for building the SQL LocalDB Wrapper assembly and NuGet packages.
-->
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(SolutionDir)AssemblyVersion.targets" />
  <!--
    By default build the Release version and place in the BuildOutput directory, then run the automated tests.
  -->
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <SqlLocalDbRoot>$(MSBuildProjectDirectory)\</SqlLocalDbRoot>
    <OutDir>$(SqlLocalDbRoot)BuildOutput\</OutDir>
    <OutDir>$([System.IO.Path]::GetFullPath('$(OutDir)'))</OutDir>
    <SolutionFile>$(SqlLocalDbRoot)SqlLocalDb.sln</SolutionFile>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>
    <RunTests Condition="'$(RunTests)' == ''">true</RunTests>
  </PropertyGroup>
  <!--
    By default all compiler and static analysis warnings are treated as errors.
  -->
  <PropertyGroup>
    <CodeAnalysisTreatWarningsAsErrors Condition="'$(CodeAnalysisTreatWarningsAsErrors)' == ''">true</CodeAnalysisTreatWarningsAsErrors>
    <SourceAnalysisTreatErrorsAsWarnings Condition="'$(SourceAnalysisTreatErrorsAsWarnings)' == ''">false</SourceAnalysisTreatErrorsAsWarnings>
    <TreatWarningsAsErrors Condition="'$(TreatWarningsAsErrors)' == ''">true</TreatWarningsAsErrors>
  </PropertyGroup>
  <!--
    Set properties to determine whether to build the NuGet packages
    and ZIP files. By default, only AppVeyor CI builds do this.
  -->
  <PropertyGroup>
    <SignOff Condition="'$(SignOff)' == ''">false</SignOff>
    <CreatePackage Condition="'$(SignOff)' == 'true' or '$(CI)' != ''">true</CreatePackage>
    <CreatePackage Condition="'$(CreatePackage)' == ''">false</CreatePackage>
    <CreateZip Condition="'$(SignOff)' == 'true' or '$(CI)' != ''">true</CreateZip>
    <CreateZip Condition="'$(CreateZip)' == ''">false</CreateZip>
  </PropertyGroup>
  <!--
    Define property for the assembly for in-line tasks so that the solution compiles correctly in Visual Studio 2015.
  -->
  <PropertyGroup>
    <CodeTaskFactoryAssembly Condition="'$(MSBuildToolsVersion)' != '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</CodeTaskFactoryAssembly>
    <CodeTaskFactoryAssembly Condition="'$(MSBuildToolsVersion)' == '14.0'">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>
  </PropertyGroup>
  <!--
    Set the build properties to pass through to MSBuild to compile the solution.
  -->
  <PropertyGroup>
    <BuildProperties>Configuration=$(Configuration);CodeAnalysisTreatWarningsAsErrors=$(CodeAnalysisTreatWarningsAsErrors);SourceAnalysisTreatErrorsAsWarnings=$(SourceAnalysisTreatErrorsAsWarnings);TreatWarningsAsErrors=$(TreatWarningsAsErrors)</BuildProperties>
  </PropertyGroup>
  <!--
    Define which platforms to build for. This is a legacy from when
    there were x86 and x64 platforms for compiling a C/C++ interop DLL,
    but retaining for if it is needed again in a future version.
  -->
  <ItemGroup>
    <PlatformsToBuild Include="Any CPU" />
  </ItemGroup>
  <!--
    Define the targets for cleaning and (re)building with appropriate target dependencies.
  -->
  <Target Name="Clean">
    <MSBuild Projects="$(SolutionFile)" Targets="Clean" Properties="$(BuildProperties);Platform=%(PlatformsToBuild.Identity);OutDir=$(OutDir)" />
  </Target>
  <Target Name="Build" DependsOnTargets="RestorePackages">
    <MSBuild Projects="$(SolutionFile)" Targets="Build" Properties="$(BuildProperties);Platform=%(PlatformsToBuild.Identity);OutDir=$(OutDir)" />
  </Target>
  <Target Name="Rebuild" DependsOnTargets="RestorePackages">
    <MSBuild Projects="$(SolutionFile)" Targets="Rebuild" Properties="$(BuildProperties);Platform=%(PlatformsToBuild.Identity);OutDir=$(OutDir)" />
  </Target>
  <Target Name="BeforeBuild" BeforeTargets="Build;Rebuild">
    <!--
      If there is a Git commit ID available update the [AssemblyConfiguration] attribute to contain it.
    -->
    <CallTarget Targets="UpdateAssemblyConfiguration" Condition="'$(APPVEYOR_REPO_COMMIT)' != ''" />
    <!--
      If this is an AppVeyor CI build set the release description to use for creating a GitHub release.
    -->
    <CallTarget Targets="SetGitHubReleaseDescription" Condition="'$(APPVEYOR)' != ''" />
  </Target>
  <Target Name="AfterBuild" AfterTargets="Build;Rebuild">
    <CallTarget Targets="Test" Condition="'$(RunTests)' == 'true'" />
    <CallTarget Targets="CreateZipFiles" Condition="'$(CreateZip)' == 'true'" />
    <CallTarget Targets="CreateNuGetPackage" Condition="'$(CreatePackage)' == 'true'" />
  </Target>
  <!--
    Target that runs the automated tests using Visual Studio Test Runner.
  -->
  <Target Name="Test">
    <!--
      Determine whether the current process has administrator rights.
      If it does not, then do not run tests that require them to prevent
      the test run from failing due to Inconclusive test results.
    -->
    <IsCurrentUserAdmin>
      <Output PropertyName="_IsCurrentUserAdmin" TaskParameter="IsAdmin" />
    </IsCurrentUserAdmin>
    <!--
      Find the Visual Studio Test Runner on the local machine for the appropriate Visual Studio version.
    -->
    <PropertyGroup>
      <VSPath Condition="'$(MSBuildToolsVersion)' != '14.0'">$(VS120COMNTOOLS)</VSPath>
      <VSPath Condition="'$(MSBuildToolsVersion)' == '14.0'">$(VS140COMNTOOLS)</VSPath>
      <TestToolDir Condition="'$(APPVEYOR)' == ''">$(VSPath)..\IDE\CommonExtensions\Microsoft\TestWindow\</TestToolDir>
      <TestToolDir Condition="'$(APPVEYOR)' != ''"></TestToolDir>
      <TestToolName>vstest.console.exe</TestToolName>
    </PropertyGroup>
    <!--
      Set the appropriate options for the test run.
    -->
    <PropertyGroup Condition="'$(TestCaseFilter)' == ''">
      <TestCaseFilter Condition="!$(_IsCurrentUserAdmin)">$(TestCaseFilter)TestCategory!=RequiresAdministrativePermissions&amp;</TestCaseFilter>
      <TestCaseFilter Condition="'$(APPVEYOR)' == ''">$(TestCaseFilter)TestCategory!=CIOnly&amp;</TestCaseFilter>
      <TestCaseFilter>$(TestCaseFilter.TrimEnd('&amp;'))</TestCaseFilter>
      <TestCaseFilter Condition="'$(TestCaseFilter)' != ''">/TestCaseFilter:$(TestCaseFilter)</TestCaseFilter>
    </PropertyGroup>
    <PropertyGroup>
      <SpecifyTestFramework Condition="'$(SpecifyTestFramework)' == ''">true</SpecifyTestFramework>
      <TestFramework Condition="'$(TestFramework)' == ''">Framework40</TestFramework>
      <TestInIsolation Condition="'$(TestInIsolation)' == ''">true</TestInIsolation>
      <SpecifyTestSettingsFile Condition="'$(SpecifyTestSettingsFile)' == ''">true</SpecifyTestSettingsFile>
      <TestSettings Condition="'$(TestSettings)' == ''">$(SolutionDir)SqlLocalDb.runsettings</TestSettings>
      <TestOptions Condition="'$(TestCaseFilter)' != ''">$(TestOptions) $(TestCaseFilter)</TestOptions>
      <TestOptions>$(TestOptions.TrimStart())</TestOptions>
      <!--
        If this is an AppVeyor CI build use the custom logger that registers the test results with the build log.
      -->
      <TestOptions Condition="'$(APPVEYOR)' != ''">$(TestOptions) /logger:Appveyor</TestOptions>
      <EnableCodeCoverage Condition="'$(EnableCodeCoverage)' == ''">true</EnableCodeCoverage>
    </PropertyGroup>
    <!--
      Find the test assemblies and declare the platforms to test for.
      The assembly is AnyCPU but is tested running in processes that are
      32-bit and 64-bit to test that the P/Invoke code works correctly.
    -->
    <ItemGroup>
      <TestContainer Include="$(OutDir)\*tests*.dll" />
      <PlatformsToTest Include="x86" />
      <PlatformsToTest Include="x64" />
    </ItemGroup>
    <PropertyGroup>
      <_TestTool>%22$(TestToolDir)$(TestToolName)%22</_TestTool>
      <_TestCommand>@(TestContainer->'%22%(fullpath)%22', ' ')</_TestCommand>
      <_TestCommand Condition="'$(SpecifyTestSettingsFile)' == 'true' and '$(TestSettings)' != ''">$(_TestCommand) %22/Settings:$(TestSettings)%22</_TestCommand>
      <_TestCommand Condition="'$(TestInIsolation)' == 'true'">$(_TestCommand) /InIsolation</_TestCommand>
      <_TestCommand Condition="'$(SpecifyTestFramework)' == 'true' and '$(TestFramework)' != ''">$(_TestCommand) %22/Framework:$(TestFramework)%22</_TestCommand>
      <_TestCommand Condition="'$(UseConsoleTestLogger)' == 'true'">$(_TestCommand) /logger:Console</_TestCommand>
    </PropertyGroup>
    <PropertyGroup>
      <CodeCoverageXml>$(OutDir)SqlLocalDb_coverage.xml</CodeCoverageXml>
      <_OpenCoverVersion>4.6.166</_OpenCoverVersion>
      <_OpenCoverTool>%22$(SolutionDir)packages\OpenCover.$(_OpenCoverVersion)\Tools\OpenCover.Console.exe%22</_OpenCoverTool>
      <_OpenCoverOptions>-register:user -nodefaultfilters -hideskipped:All -skipautoprops -returntargetcode -output:%22$(CodeCoverageXml)%22</_OpenCoverOptions>
    </PropertyGroup>
    <!--
      Run Visual Studio Test Runner (via OpenCover if code coverage is enabled) for each test assembly.
    -->
    <Exec Condition="'$(EnableCodeCoverage)' != 'true'" Command="$(_TestTool) $(_TestCommand) %22/Platform:%(PlatformsToTest.Identity)%22 $(TestOptions)" WorkingDirectory="$(OutDir)" />
    <Delete Condition="'$(EnableCodeCoverage)' == 'true'" Files="$(CodeCoverageXml)" />
    <Exec Condition="'$(EnableCodeCoverage)' == 'true'" Command="$(_OpenCoverTool) $(_OpenCoverOptions) -target:$(_TestTool) -targetargs:%22$(_TestCommand) /Platform:%(PlatformsToTest.Identity) $(TestOptions)%22" WorkingDirectory="$(OutDir)" />
    <!--
      Add coverage XML file artifact for AppVeyor CI builds.
    -->
    <Exec Condition="'$(EnableCodeCoverage)' == 'true' and '$(APPVEYOR)' != '' and Exists('$(CodeCoverageXml)')" Command="appveyor PushArtifact %22$(CodeCoverageXml)%22" />
    <!--
      Upload code coverage XML to coveralls.io.
    -->
    <ItemGroup Condition="'$(CoverallsTool)' == ''">
      <CoverallsTool Include="$(SolutionDir)packages\coveralls.net.*\csmacnz.coveralls.exe" />
    </ItemGroup>
    <PropertyGroup Condition="'$(CoverallsTool)' == ''">
      <CoverallsTool>@(CoverallsTool)</CoverallsTool>
    </PropertyGroup>
    <Message Condition="'$(EnableCodeCoverage)' == 'true' and '$(APPVEYOR)' != '' and '$(CoverallsRepoToken)' != '' and Exists('$(CodeCoverageXml)')" Text="Uploading code coverage XML to coveralls.io..." Importance="high" />
    <Exec Condition="'$(EnableCodeCoverage)' == 'true' and '$(APPVEYOR)' != '' and '$(CoverallsRepoToken)' != '' and Exists('$(CodeCoverageXml)')" Command="$(CoverallsTool) --opencover --input %22$(CodeCoverageXml)%22 --repoToken %22$(CoverallsRepoToken)%22 --commitId %22$(APPVEYOR_REPO_COMMIT)%22 --commitBranch %22$(APPVEYOR_REPO_BRANCH)%22 --commitAuthor %22$(APPVEYOR_REPO_COMMIT_AUTHOR)%22 --commitEmail %22$(APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL)%22 --commitMessage %22$(APPVEYOR_REPO_COMMIT_MESSAGE)%22 --jobId %22$(APPVEYOR_BUILD_ID)%22 --serviceName %22AppVeyor%22 --useRelativePaths" IgnoreExitCode="true" WorkingDirectory="$(SqlLocalDbRoot)..\" />
  </Target>
  <!--
    Task that determines whether the user associated with
    the current process has administrative privileges.
  -->
  <UsingTask TaskName="IsCurrentUserAdmin" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <IsAdmin ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Security.Principal" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        using (WindowsIdentity identity = WindowsIdentity.GetCurrent())
        {
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            IsAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>
  <!--
    Creates the ZIP files containing the build output.
  -->
  <UsingTask TaskName="MSBuild.ExtensionPack.Compression.Zip" AssemblyFile="$(SolutionDir)Tools\MSBuildExtensionPack\MSBuild.ExtensionPack.dll" />
  <Target Name="CreateZipFiles">
    <!--
      Create the ZIP file containing the compiled assembly.
    -->
    <ItemGroup>
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.dll" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.xml" />
      <FilesToZip Include="$(OutDir)\en-GB\System.Data.SqlLocalDb.resources.dll" />
    </ItemGroup>
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressFiles="@(FilesToZip)" RemoveRoot="$(OutDir)" ZipFileName="$(OutDir)SqlLocalDb_$(AssemblyVersion).zip" />
    <!--
      Create the ZIP file containing the compiled assembly, the PDBs and the test application.
    -->
    <ItemGroup>
      <FilesToZip Include="$(OutDir)\log4net.dll" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.pdb" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.TestApp.exe" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.TestApp.exe.config" />
      <FilesToZip Include="$(OutDir)\System.Data.SqlLocalDb.TestApp.pdb" />
    </ItemGroup>
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressFiles="@(FilesToZip)" RemoveRoot="$(OutDir)" ZipFileName="$(OutDir)SqlLocalDb_$(AssemblyVersion).TestApp.zip" />
  </Target>
  <!--
    Creates the NuGet packages for the assembly.
  -->
  <Target Name="CreateNuGetPackage">
    <PropertyGroup>
      <!--
        The path of the file containing the released file versions of the assembly.
      -->
      <_ReleasesFileName>$(SolutionDir)\..\releases.txt</_ReleasesFileName>
    </PropertyGroup>
    <!--
      If this is an AppVeyor CI build that is not associated with a tag
      (i.e. not a build for release), then determine the pre-release version
      number to use by calculating the build number offset from the build
      number of the last released version compared to this build number.
    -->
    <GetPrereleaseVersionForCIBuild Condition="'$(NuGetPrerelease)' == '' and '$(CI)' != '' and '$(APPVEYOR_REPO_TAG)' == 'false' and '$(APPVEYOR_BUILD_NUMBER)' != ''"
                                    AssemblyVersion="$(AssemblyVersion)"
                                    CIBuildNumber="$(APPVEYOR_BUILD_NUMBER)"
                                    ReleasesFileName="$(_ReleasesFileName)">
      <Output PropertyName="_PrereleaseVersion" TaskParameter="PrereleaseVersion" />
    </GetPrereleaseVersionForCIBuild>
    <!--
      Update the NuGet prerelease version if one was determined from the build number.
    -->
    <PropertyGroup Condition="'$(NuGetPrerelease)' == '' and '$(_PrereleaseVersion)' != ''">
      <NuGetPrerelease>beta$(_PrereleaseVersion)</NuGetPrerelease>
    </PropertyGroup>
    <!--
      Set the NuGet package version, trimming off the revision number from
      the assembly version and adding the pre-release version if required.
    -->
    <PropertyGroup>
      <NuGetVersion Condition="'$(NuGetVersion)' == ''">$(AssemblyVersion.Substring(0, $(AssemblyVersion.LastIndexOf(`.`))))</NuGetVersion>
      <NuGetVersion Condition="'$(NuGetPrerelease)' != ''">$(NuGetVersion)-$(NuGetPrerelease)</NuGetVersion>
    </PropertyGroup>
    <!--
      Copy the C# source code for the assembly to the output
      directory, deleting any previous compile's source files first.
    -->
    <RemoveDir Directories="$(OutDir)\src" />
    <ItemGroup>
      <SourceFiles Include="$(SolutionDir)\*.cs;$(SolutionDir)\**\SqlLocalDb\**\*.cs" Exclude="$(SolutionDir)\**\obj\**\*.cs" />
    </ItemGroup>
    <Copy SourceFiles="@(SourceFiles)" DestinationFolder="$(OutDir)\src\%(RecursiveDir)" />
    <!--
      Create the NuGet packages from the nuspec file.
    -->
    <PropertyGroup>
      <NuGetTool>$(SolutionDir)\Tools\NuGet\NuGet.exe</NuGetTool>
      <NuSpecFile>$(OutDir)SqlLocalDb.nuspec</NuSpecFile>
    </PropertyGroup>
    <Exec Command="$(NuGetTool) pack %22$(NuSpecFile)%22 -Properties AssemblyVersion=$(NuGetVersion) -OutputDirectory $(OutDir) -Symbols" StandardOutputImportance="high" />
  </Target>
  <!--
    Delete any ZIP/NuGet-related files when doing a Clean.
  -->
  <Target Name="CleanArchiveFiles" AfterTargets="Clean">
    <CreateItem Include="$(OutDir)\*.nupkg">
      <Output TaskParameter="Include" ItemName="ArchiveWrites" />
    </CreateItem>
    <CreateItem Include="$(OutDir)\*.zip">
      <Output TaskParameter="Include" ItemName="ArchiveWrites" />
    </CreateItem>
    <Delete Files="@(ArchiveWrites)" />
    <RemoveDir Directories="$(OutDir)\src" />
  </Target>
  <!--
    Updates the source code to include the GitHub commit
    SHA in the [AssemblyConfiguration] attribute.
  -->
  <Target Name="UpdateAssemblyConfiguration">
    <UpdateAssemblyConfiguration AssemblyInfoPath="$(SolutionDir)CommonAssemblyInfo.cs" CommitId="$(APPVEYOR_REPO_COMMIT)" Branch="$(APPVEYOR_REPO_BRANCH)" />
  </Target>
  <UsingTask
    TaskName="UpdateAssemblyConfiguration"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <AssemblyInfoPath Required="true" />
      <CommitId Required="true" />
      <Branch Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          string content = File.ReadAllText(AssemblyInfoPath);
          content = content.Replace("[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyConfiguration(\"" + CommitId + "|" + Branch + "\")]");
          File.WriteAllText(AssemblyInfoPath, content);
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <!--
    Set properties for builds for Coverity static analysis.
  -->
  <PropertyGroup>
    <CoverityOutputDir Condition="'$(CoverityOutputDir)' == ''">$(OutDir)cov-int</CoverityOutputDir>
    <CoverityProjectName Condition="'$(CoverityProjectName)' == ''">martincostello%2Fsqllocaldb</CoverityProjectName>
    <CoverityToolDir Condition="'$(CoverityToolDir)' == ''">$(SqlLocalDbRoot)Tools\Coverity\</CoverityToolDir>
    <CoverityZipFile Condition="'$(CoverityZipFile)' == ''">$(OutDir)SqlLocalDb_$(AssemblyVersion).Coverity.zip</CoverityZipFile>
    <CurlToolPath>$(SqlLocalDbRoot)Tools\Curl\curl.exe</CurlToolPath>
  </PropertyGroup>
  <!--
      The email and project token must be either set using
      an environment variable or on the MSBuild command line.
    -->
    <PropertyGroup>
      <CoverityEmail Condition="'$(CoverityEmail)' == ''"></CoverityEmail>
      <CoverityProjectToken Condition="'$(CoverityProjectToken)' == ''"></CoverityProjectToken>
    </PropertyGroup>
  <!--
    Downloads the Coverity compiler from the internet.
  -->
  <Target Name="DownloadCoverity">
    <PropertyGroup>
      <CoverityToolZipFile>$(CoverityToolDir)Coverity.zip</CoverityToolZipFile>
      <CoverityToolZipMD5File>$(CoverityToolDir)Coverity.zip.md5</CoverityToolZipMD5File>
      <CoverityDownloadUri>https://scan.coverity.com/download/csharp/win_64</CoverityDownloadUri>
      <CoverityDownloadCommand>%22$(CurlToolPath)%22 --silent --form project=$(CoverityProjectName) --form token=$(CoverityProjectToken) $(CoverityDownloadUri) -o %22$(CoverityToolZipFile)%22</CoverityDownloadCommand>
      <CoverityMD5Command>%22$(CurlToolPath)%22 --silent --form project=$(CoverityProjectName) --form md5=1 --form token=$(CoverityProjectToken) $(CoverityDownloadUri) -o %22$(CoverityToolZipMD5File)%22</CoverityMD5Command>
    </PropertyGroup>
    <ItemGroup>
      <OldCoverityDirectories Condition="Exists('$(CoverityToolDir)')" Include="$([System.IO.Directory]::GetDirectories('$(CoverityToolDir)'))" />
    </ItemGroup>
    <!--
      Validate properties before attempting download.
    -->
    <Error Condition="'$(CoverityProjectToken)' == ''" Text="The CoverityProjectToken property is not defined." />
    <!--
      Create the Coverity tool directory if it does not exist.
    -->
    <MakeDir Condition="!Exists('$(CoverityToolDir)')" Directories="$(CoverityToolDir)" />
    <!--
      If the ZIP file containing the Coverity tool already exists
      check its MD5 to see whether it is the latest version.
    -->
    <Message Condition="Exists('$(CoverityToolZipFile)')" Text="Checking for an updated version of the Coverity tool..." Importance="high" />
    <Exec Condition="Exists('$(CoverityToolZipFile)')" Command="$(CoverityMD5Command)" />
    <ReadLinesFromFile Condition="Exists('$(CoverityToolZipMD5File)')" File="$(CoverityToolZipMD5File)">
      <Output TaskParameter="Lines" PropertyName="CoverityLatestMD5" />
    </ReadLinesFromFile>
    <Delete Condition="Exists('$(CoverityToolZipMD5File)')" Files="$(CoverityToolZipMD5File)" />
    <!--
      If the Coverity ZIP file exists locally, compute its MD5 hash.
    -->
    <ComputeMD5Hash Condition="Exists('$(CoverityToolZipFile)')" FileName="$(CoverityToolZipFile)">
      <Output TaskParameter="MD5Hash" PropertyName="CoverityLocalMD5" />
    </ComputeMD5Hash>    
    <!--
      Determine whether the ZIP file we already have locally is up-to-date.
    -->
    <PropertyGroup>
      <_IsLatestCoverityTool Condition="'$(CoverityLocalMD5)' != '' and '$(CoverityLocalMD5)' == '$(CoverityLatestMD5)'">true</_IsLatestCoverityTool>
      <_IsLatestCoverityTool Condition="'$(CoverityLocalMD5)' == '' or '$(CoverityLocalMD5)' != '$(CoverityLatestMD5)'">false</_IsLatestCoverityTool>
    </PropertyGroup>
    <!--
      If the file doesn't exist then download it.
    -->
    <Message Condition="!Exists('$(CoverityToolZipFile)')" Text="Downloading '$(CoverityToolZipFile)'..." Importance="high" />
    <!--
      If the file exists but is out of date then download it to update it.
    -->
    <Message Condition="'$(_IsLatestCoverityTool)' == 'false' and Exists('$(CoverityToolZipFile)')" Text="Updating Coverity tool to the latest version (MD5: $(CoverityLatestMD5))..." Importance="high" />
    <!--
      If the file exists and the MD5 hash matches, then we are already up-to-date.
    -->
    <Message Condition="Exists('$(CoverityToolZipFile)') and '$(_IsLatestCoverityTool)' == 'true'" Text="The Coverity tool is up-to-date (MD5: $(CoverityLatestMD5))." Importance="high" />
    <!--
      Delete all directories in the Coverity tool directory if we need to update the current version.
    -->
    <RemoveDir Condition="'$(_IsLatestCoverityTool)' == 'false'" Directories="@(OldCoverityDirectories)" />
    <!--
      Download the latest ZIP file.
    -->
    <Exec Condition="!Exists('$(CoverityToolZipFile)') or '$(_IsLatestCoverityTool)' == 'false'" Command="$(CoverityDownloadCommand)" WorkingDirectory="$(CoverityToolDir)" />    
    <!--
      Extract the tool if the ZIP file exists and we just downloaded
      it or it it exists but the extracted directory does not.
    -->
    <Message Condition="('$(_IsLatestCoverityTool)' == 'false' and Exists('$(CoverityToolZipFile)')) or '@(OldCoverityDirectories->Count())' == 0" Text="Extracting '$(CoverityToolZipFile)'..." Importance="high" />
    <MSBuild.ExtensionPack.Compression.Zip
      Condition="('$(_IsLatestCoverityTool)' == 'false' and Exists('$(CoverityToolZipFile)')) or '@(OldCoverityDirectories->Count())' == 0"
      TaskAction="Extract"
      ZipFileName="$(CoverityToolZipFile)"
      ExtractPath="$(CoverityToolDir)" />
  </Target>
  <!--
    Build the assembly using the Coverity compiler,
    downloading/update the tool first if required.
  -->
  <Target Name="BuildCoverity" DependsOnTargets="DownloadCoverity">
    <ItemGroup Condition="'$(CoverityTool)' == ''">
      <CoverityTool Include="$(CoverityToolDir)**\bin\cov-build.exe" />
    </ItemGroup>
    <PropertyGroup>
      <CoverityTool>@(CoverityTool)</CoverityTool>
    </PropertyGroup>    
    <Error Condition="!Exists('$(CoverityTool)')" Text="The Coverity Build Tool cannot be found." />
    <Exec Command="%22$(CoverityTool)%22 --dir %22$(CoverityOutputDir)%22 %22$(SqlLocalDbRoot)..\Build.cmd%22 /t:Rebuild /p:RunTests=false" />
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressPath="$(CoverityOutputDir)" RemoveRoot="$(OutDir)" ZipFileName="$(CoverityZipFile)" />
  </Target>
  <!--
    Delete any previous Coverity compilation.
  -->
  <Target Name="CleanCoverity" AfterTargets="Clean">
    <CreateItem Include="$(CoverityZipFile)">
      <Output TaskParameter="Include" ItemName="CoverityWrites" />
    </CreateItem>
    <Delete Files="@(CoverityWrites)" />
    <RemoveDir Directories="$(CoverityOutputDir)" />
  </Target>
  <!--
    Upload the previously Coverity-compiled assemblies for static analysis.
  -->
  <Target Name="UploadCoverity">
    <!--
      Set Coverity project properties and cURL commands for upload.
    -->
    <PropertyGroup>
      <CoverityBuildDescription Condition="'$(CoverityBuildDescription)' == ''">$(AssemblyVersion)</CoverityBuildDescription>
      <CoverityProjectUrl Condition="'$(CoverityProjectUrl)' == ''">https://scan.coverity.com/builds?project=martincostello%2Fsqllocaldb</CoverityProjectUrl>
      <CoverityUploadCommand>%22$(CurlToolPath)%22 --silent --form project=$(CoverityProjectName) --form token=$(CoverityProjectToken) --form email=$(CoverityEmail) --form file=@$(CoverityZipFile) --form version="$(AssemblyVersion)" --form description="$(CoverityBuildDescription)" $(CoverityProjectUrl)</CoverityUploadCommand>
    </PropertyGroup>
    <!--
      Validate properties before attempting a build upload.
    -->
    <Error Condition="'$(CoverityEmail)' == ''" Text="The CoverityEmail property is not defined." />
    <Error Condition="'$(CoverityProjectToken)' == ''" Text="The CoverityProjectToken property is not defined." />
    <Error Condition="!Exists('$(CurlToolPath)')" Text="The upload tool cannot be found." />
    <Error Condition="!Exists('$(CoverityZipFile)')" Text="The Coverity ZIP file cannot be found." />
    <!--
      Upload the last compilation to Coverity for static analysis.
    -->
    <Message Text="Uploading '$(CoverityZipFile)' to Coverity for static analysis..." Importance="high" />
    <Exec Command="$(CoverityUploadCommand)" />
    <Message Text="Uploaded '$(CoverityZipFile)' to Coverity for static analysis." Importance="high" />
  </Target>
  <!--
    Restores the NuGet package dependencies.
  -->
  <Target Name="RestorePackages">
    <PropertyGroup>
      <NuGetToolsPath>$([System.IO.Path]::Combine($(SolutionDir), "Tools", "NuGet"))</NuGetToolsPath>
      <NuGetExePath>$(NuGetToolsPath)\nuget.exe</NuGetExePath>
      <RequireRestoreConsent>false</RequireRestoreConsent>
    </PropertyGroup>
    <Message Text="Restoring NuGet packages..." Importance="normal" />
    <Exec Command="%22$(NuGetExePath)%22 restore %22$(SolutionFile)%22" LogStandardErrorAsError="true" />
  </Target>
  <!--
    Sets up the release description to use when creating a GitHub release from an AppVeyor CI build.
    The release description is set by reading the details for the current version from the changelog.md Markdown file
  -->
  <PropertyGroup>
    <ChangelogPath>$(SolutionDir)\..\changelog.md</ChangelogPath>
  </PropertyGroup>
  <Target Name="SetGitHubReleaseDescription" Condition="Exists('$(ChangelogPath)')">
    <PropertyGroup>
      <ReleaseDescription></ReleaseDescription>
    </PropertyGroup>
    <!--
      Read in the Markdown from the changelog.
    -->
    <ReadLinesFromFile File="$(ChangelogPath)">
      <Output TaskParameter="Lines" PropertyName="ReleaseDescription" />
    </ReadLinesFromFile>
    <!--
      Find the lines associated with this version in the changelog
      and fix up the formatting so it renders correctly in GitHub.
    -->
    <PropertyGroup>
      <ReleaseDescription>$(ReleaseDescription.Substring($(ReleaseDescription.IndexOf(`# SqlLocalDb v$(AssemblyVersion)`))))</ReleaseDescription>
      <ReleaseDescription>$(ReleaseDescription.Replace(`;`, `\n`))</ReleaseDescription>
    </PropertyGroup>
    <!--
      Use the AppVeyor tool to call out of the MSBuild process and
      set the release description into an environment variable so
      AppVeyor can reference it when it creates the GitHub release
      later in the build process when MSBuild is no longer running.
    -->
    <Exec Command="appveyor SetVariable -Name %22GitHubReleaseDescription%22 -Value %22$(ReleaseDescription)%22" />
  </Target>
  <!--
    Determines the build number relative to the assembly version number
    by using the release history file which contains the build numbers
    associated with each released version of the assembly.
  -->
  <UsingTask TaskName="GetPrereleaseVersionForCIBuild"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <AssemblyVersion Required="true" />
      <CIBuildNumber Required="true" />
      <ReleasesFileName Required="true" />
      <PrereleaseVersion ParameterType="System.Int32" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        string lastReleasedVersionString = System.IO.File.ReadAllLines(ReleasesFileName).Last();
        Version lastReleasedVersion = new Version(lastReleasedVersionString);
        Version thisVersion = new Version(AssemblyVersion);
        int thisBuildNumber = int.Parse(CIBuildNumber, System.Globalization.CultureInfo.InvariantCulture);
        
        if (lastReleasedVersion.Major == thisVersion.Major &&
            lastReleasedVersion.Minor == thisVersion.Minor)
        {
            // If the version number has not increased, just use the build
            // number as its guaranteed to be larger than the last number
            PrereleaseVersion = thisBuildNumber;
        }
        else
        {
            // Determine the offset between this build and the build of the last version
            PrereleaseVersion = thisBuildNumber - lastReleasedVersion.Build;
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>
  <!--
    Computes the MD5 hash of a file and outputs it as a hexadecimal string.
  -->
  <UsingTask TaskName="ComputeMD5Hash" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssembly)">
    <ParameterGroup>
      <FileName Required="true" />
      <MD5Hash Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Security.Cryptography" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        using (Stream stream = File.OpenRead(FileName))
        {
            using (HashAlgorithm algorithm = MD5.Create())
            {             
                byte[] hashBytes = algorithm.ComputeHash(stream);
                
                var builder = new System.Text.StringBuilder();

                foreach (byte b in hashBytes)
                {
                    builder.AppendFormat(System.Globalization.CultureInfo.InvariantCulture, "{0:x2}", b);
                }

                MD5Hash = builder.ToString();
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>